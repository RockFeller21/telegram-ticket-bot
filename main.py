import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
import time

from config import API_TOKEN, ADMIN_ID
from db import init_db, add_mailing, get_mailings, update_last_sent
from keyboards import admin_main_kb, back_to_menu_kb
from utils import check_bot_admin
from mailing_manage import router as mailing_router

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class MailingState(StatesGroup):
    text = State()
    interval = State()
    channel = State()

@dp.message(Command("start"))
async def admin_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>", parse_mode="HTML")
        return
    await message.answer(
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞—Å—Å—ã–ª–æ–∫!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=admin_main_kb(),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞—Å—Å—ã–ª–æ–∫!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=admin_main_kb(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "create_mailing")
async def create_mailing_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await callback.message.answer(
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
        parse_mode="HTML",
        reply_markup=back_to_menu_kb()
    )
    await state.set_state(MailingState.text)
    await callback.answer()

@dp.message(MailingState.text)
async def mailing_text(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.update_data(text=message.text)
    await message.answer(
        "‚è± <b>–° –∫–∞–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60, 300, 1800).",
        parse_mode="HTML",
        reply_markup=back_to_menu_kb()
    )
    await state.set_state(MailingState.interval)

@dp.message(MailingState.interval)
async def mailing_interval(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        interval = int(message.text)
        if interval < 1:
            raise ValueError
        await state.update_data(interval=interval)
        await message.answer(
            "üì¢ <b>–£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>-1001234567890</code>):",
            parse_mode="HTML",
            reply_markup=back_to_menu_kb()
        )
        await state.set_state(MailingState.channel)
    except ValueError:
        await message.answer(
            "‚ùóÔ∏è <b>–û—à–∏–±–∫–∞:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60, 300, 1800).\n"
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode="HTML",
            reply_markup=admin_main_kb()
        )
        await state.clear()

@dp.message(MailingState.channel)
async def mailing_channel(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        channel_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùóÔ∏è <b>–û—à–∏–±–∫–∞:</b> ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode="HTML",
            reply_markup=admin_main_kb()
        )
        await state.clear()
        return

    try:
        test_msg = await bot.send_message(channel_id, "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ.")
        await bot.delete_message(channel_id, test_msg.message_id)
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è <b>–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!</b>\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –æ–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=admin_main_kb()
        )
        await state.clear()
        return

    data = await state.get_data()
    await add_mailing(data['text'], data['interval'], channel_id)
    await message.answer(
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b> üéâ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=admin_main_kb(),
        parse_mode="HTML"
    )
    await state.clear()

async def mailing_worker():
    while True:
        mailings = await get_mailings()
        now = time.time()
        for m in mailings:
            mailing_id = m[0]
            text = m[1]
            interval = m[2]
            channel_id = m[3]
            enabled = m[4]
            last_sent = m[5] if len(m) > 5 else 0

            if not enabled:
                continue

            if now - (last_sent or 0) >= interval:
                try:
                    await bot.send_message(channel_id, text)
                    await update_last_sent(mailing_id, now)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")

        await asyncio.sleep(2)

async def main():
    await init_db()
    dp.include_router(mailing_router)
    asyncio.create_task(mailing_worker())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())